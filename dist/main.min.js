(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/main.js":[function(require,module,exports){
'use strict';

var game, ns = {
  Boot: require('./boot'),
  Preloader: require('./preloader'),
  Menu: require('./menu'),
  Game: require('./game')
};

game = new Phaser.Game(288, 505, Phaser.AUTO, 'flappy-bird-reborn-game');
game.state.add('boot', ns.Boot);
game.state.add('preloader', ns.Preloader);
game.state.add('menu', ns.Menu);
game.state.add('game', ns.Game);

game.state.start('boot');
},{"./boot":"/home/ubuntu/workspace/src/js/boot.js","./game":"/home/ubuntu/workspace/src/js/game.js","./menu":"/home/ubuntu/workspace/src/js/menu.js","./preloader":"/home/ubuntu/workspace/src/js/preloader.js"}],"/home/ubuntu/workspace/src/js/boot.js":[function(require,module,exports){
'use strict';

function Boot() {}

Boot.prototype = {

  preload: function() {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function() {
    this.game.input.maxPointers = 1;

    if (this.game.device.desktop) {
      this.game.scale.pageAlignHorizontally = true;
    }
    else {
      this.game.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.game.scale.minWidth = 480;
      this.game.scale.minHeight = 260;
      this.game.scale.maxWidth = 640;
      this.game.scale.maxHeight = 480;
      this.game.scale.forceLandscape = true;
      this.game.scale.pageAlignHorizontally = true;
      this.game.scale.setScreenSize(true);
    }
    this.game.state.start('preloader');
  }
};

module.exports = Boot;
},{}],"/home/ubuntu/workspace/src/js/game.js":[function(require,module,exports){
'use strict';
var Bird = require('./prefab/bird'),
  Ground = require('./prefab/ground'),
  PipeGroup = require('./prefab/pipeGroup'),
  Scoreboard = require('./prefab/scoreboard');

function Game() {
  this.player = null;
}

Game.prototype = {

  create: function() {
    this.score = 0;
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.physics.arcade.gravity.y = 1200;

    // add the background sprite
    this.background = this.game.add.sprite(0, 0, 'background');

    this.bird = new Bird(this.game, 100, this.game.height / 2);
    this.game.add.existing(this.bird);

    this.ground = new Ground(this.game, 0, 400, 335, 112);
    this.game.add.existing(this.ground);

    this.pipes = this.game.add.group();

    this.instructionGroup = this.game.add.group();
    this.instructionGroup.add(
      this.game.add.sprite(this.game.width / 2, 100, 'getReady'));
    this.instructionGroup.add(
      this.game.add.sprite(this.game.width / 2, 325, 'instructions'));
    this.instructionGroup.setAll('anchor.x', 0.5);
    this.instructionGroup.setAll('anchor.y', 0.5);

    this.createStateInteractions();

    this.scoreText = this.game.add.bitmapText(this.game.width / 2, 10, 'flappyfont', this.score.toString(), 24);
    this.scoreText.visible = false;

    this.scoreSound = this.game.add.audio('score');
  },
  generatePipes: function() {
    var pipeY = this.game.rnd.integerInRange(-100, 100);
    var pipeGroup = this.pipes.getFirstExists(false);
    if (!pipeGroup) {
      pipeGroup = new PipeGroup(this.game, this.pipes);
    }
    pipeGroup.reset(this.game.width + pipeGroup.width / 2, pipeY);
  },
  update: function() {
    this.game.physics.arcade.collide(this.bird, this.ground, this.deathHandler, null, this);

    this.pipes.forEach(function(pipeGroup) {
      this.checkScore(pipeGroup);
      this.game.physics.arcade.collide(this.bird, pipeGroup, this.deathHandler, null, this);
    }, this);
  },
  deathHandler: function() {
    if(!this.bird.alive) return;
    this.bird.alive = false;
    this.pipes.callAll('stop');
    this.pipeGenerator.timer.stop();
    this.bird.animations.stop(null, true);
    this.ground.stopScroll();
    this.scoreboard = new Scoreboard(this.game);
    this.game.add.existing(this.scoreboard);
    this.scoreboard.show(this.score);
  },
  checkScore: function(pipeGroup) {
    if (pipeGroup.exists && !pipeGroup.hasScored && pipeGroup.topPipe.world.x <= this.bird.world.x) {
      pipeGroup.hasScored = true;
      this.score++;
      this.scoreText.setText(this.score.toString());
      this.scoreSound.play();
    }
  },
  startGame: function() {
    this.bird.body.allowGravity = true;
    this.bird.alive = true;

    this.pipeGenerator = this.game.time.events.loop(
      Phaser.Timer.SECOND * 1.25, this.generatePipes, this);
    this.pipeGenerator.timer.start();

    this.instructionGroup.destroy();

    this.scoreText.visible = true;
  },
  createStateInteractions: function() {
    this.game.input.keyboard.addKeyCapture([Phaser.Keyboard.SPACEBAR]);

    var flapKey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
    flapKey.onDown.addOnce(this.startGame, this);
    flapKey.onDown.add(this.bird.flap, this.bird);

    this.game.input.onDown.addOnce(this.startGame, this);
    this.game.input.onDown.add(this.bird.flap, this.bird);

  },
  shutdown: function() {
    this.game.input.keyboard.removeKey(Phaser.Keyboard.SPACEBAR);
    this.bird.destroy();
    this.pipes.destroy();
    this.scoreboard.destroy()
  }
};


module.exports = Game;

},{"./prefab/bird":"/home/ubuntu/workspace/src/js/prefab/bird.js","./prefab/ground":"/home/ubuntu/workspace/src/js/prefab/ground.js","./prefab/pipeGroup":"/home/ubuntu/workspace/src/js/prefab/pipeGroup.js","./prefab/scoreboard":"/home/ubuntu/workspace/src/js/prefab/scoreboard.js"}],"/home/ubuntu/workspace/src/js/menu.js":[function(require,module,exports){
'use strict';

function Menu() {
}

Menu.prototype = {

  create: function () {
    this.background = this.game.add.sprite(0, 0, 'background');
    
    // add the ground sprite as a tile
    // and start scrolling in the negative x direction
    this.ground = this.game.add.tileSprite(0,400, 335, 112, 'ground');
    this.ground.autoScroll(-200, 0);
    
    /** STEP 1 **/
    //create a group to put yhe title assets in
    // so they can be manipulated as a whole
    this.titleGroup = this.game.add.group();
    
    /** STEP 2 **/
    // create the title sprite
    // and add it to the group
    this.title = this.game.add.sprite(0, 0, 'title');
    this.titleGroup.add(this.title);
    
    /** STEP 3 **/
    // create the bird sprite
    // and add it to the title group
    this.bird = this.game.add.sprite(200, 5, 'bird');
    this.titleGroup.add(this.bird);
    
    /** STEP 4 **/
    // add an animation to the bird
    // and begin the annimation
    this.bird.animations.add('flap');
    this.bird.animations.play('flap', 12, true);
    
    /** STEP 5 **/
    // set the originating location of the group
    this.titleGroup.x = 30;
    this.titleGroup.y = 100;
    
    /** STEP 6 **/
    // create an oscillating animation tween for the group
    this.game.add.tween(this.titleGroup).to({y: 115}, 350, Phaser.Easing.Linear.NONE, true, 0, 1000, true);
    
    // add our start button with a callback
    this.startButton = this.game.add.button(this.game.width/2, 300, 'startButton', this.startClick, this);
    this.startButton.anchor.setTo(0.5,0.5);
    
  },
  startClick: function () {
    // start button click handler
    // start the 'play' state
    this.game.state.start('play');
  },
  update: function () {

  }
};

module.exports = Menu;
},{}],"/home/ubuntu/workspace/src/js/prefab/bird.js":[function(require,module,exports){
'use strict';

function Bird(game, x, y, frame) {
  Phaser.Sprite.call(this, game, x, y, 'bird', frame);
  this.animations.add('flap');
  this.animations.play('flap', 12, true);

  this.alive = false;

  game.physics.arcade.enableBody(this);
  this.body.allowGravity = false;
  this.flapSound = this.game.add.audio('flap');
}
Bird.prototype = Object.create(Phaser.Sprite.prototype);
Bird.constructor = Bird;

Bird.prototype.flap = function() {
  this.flapSound.play();
  
  this.body.velocity.y = -400;

  this.game.add.tween(this).to({
    angle: -40
  }, 100).start();
};

Bird.prototype.update = function() {
  if (this.angle < 90 && this.alive) {
    this.angle += 2.5;
  }
};

module.exports = Bird;
},{}],"/home/ubuntu/workspace/src/js/prefab/ground.js":[function(require,module,exports){
'use strict';

function Ground(game, x, y, width, height) {
  Phaser.TileSprite.call(this, game, x, y, width, height, 'ground');

  this.autoScroll(-200, 0);

  game.physics.arcade.enableBody(this);
  this.body.allowGravity = false;
  this.body.immovable = true;
}

Ground.prototype = Object.create(Phaser.TileSprite.prototype)
Ground.constructor = Ground;

module.exports = Ground;

},{}],"/home/ubuntu/workspace/src/js/prefab/pipe.js":[function(require,module,exports){
'use strict';

function Pipe(game, x, y, frame) {
  Phaser.Sprite.call(this, game, x, y, 'pipe', frame);
  this.anchor.setTo(0.5, 0.5);
  game.physics.arcade.enableBody(this);

  this.body.allowGravity = false;
  this.body.immovable = true;
}

Pipe.prototype = Object.create(Phaser.Sprite.prototype);
Pipe.constructor = Pipe;

module.exports = Pipe;
},{}],"/home/ubuntu/workspace/src/js/prefab/pipeGroup.js":[function(require,module,exports){
'use strict';
var Pipe = require('./pipe');

function PipeGroup(game, parent) {
  Phaser.Group.call(this, game, parent);

  this.topPipe = new Pipe(game, 0, 0, 0);
  this.add(this.topPipe);

  this.bottomPipe = new Pipe(game, 0, 440, 1);
  this.add(this.bottomPipe);

  this.hasScored = false;

  this.setAll('body.velocity.x', -200);


}

PipeGroup.prototype = Object.create(Phaser.Group.prototype);
PipeGroup.constructor = PipeGroup;

PipeGroup.prototype.reset = function(x, y) {
  this.topPipe.reset(0, 0);
  this.bottomPipe.reset(0, 440);

  this.x = x;
  this.y = y;

  this.setAll('body.velocity.x', -200);
  this.hasScored = false;
  this.exists = true;
};

PipeGroup.prototype.checkWorldBounds = function() {
  if (!this.topPipe.inWorld) {
    this.exists = false;
  }
};

PipeGroup.prototype.update = function() {
  this.checkWorldBounds();
};

module.exports = PipeGroup;

},{"./pipe":"/home/ubuntu/workspace/src/js/prefab/pipe.js"}],"/home/ubuntu/workspace/src/js/prefab/scoreboard.js":[function(require,module,exports){
'use strict';

function Scoreboard(game) {
    var gameover;

    Phaser.Group.call(this, game);
    gameover = this.create(this.game.width / 2, 100, 'gameover');
    gameover.anchor.setTo(0.5, 0.5);

    this.scoreboard = this.create(this.game.width / 2, 200, 'scoreboard');
    this.scoreboard.anchor.setTo(0.5, 0.5);

    this.scoreText = this.game.add.bitmapText(this.scoreboard.width, 180, 'flappyfont', '', 18);
    this.add(this.scoreText);

    this.bestScoreText = this.game.add.bitmapText(this.scoreboard.width, 230, 'flappyfont', '', 18);
    this.add(this.bestScoreText);

    // add our start button with a callback
    this.startButton = this.game.add.button(this.game.width / 2, 300, 'startButton', this.startClick, this);
    this.startButton.anchor.setTo(0.5, 0.5);

    this.add(this.startButton);

    this.y = this.game.height;
    this.x = 0;

}

Scoreboard.prototype = Object.create(Phaser.Group.prototype);
Scoreboard.constructor = Scoreboard;

Scoreboard.prototype.show = function(score) {
    var medal, bestScore;

    this.scoreText.setText(score.toString());

    if (!!localStorage) {
        // Step 2
        bestScore = localStorage.getItem('bestScore');

        // Step 3
        if (!bestScore || bestScore < score) {
            bestScore = score;
            localStorage.setItem('bestScore', bestScore);
        }
    }
    else {
        // Fallback. LocalStorage isn't available
        bestScore = 'N/A';
    }

    // Step 4
    this.bestScoreText.setText(bestScore.toString());

    // Step 5 & 6
    if (score >= 10 && score < 20) {
        medal = this.game.add.sprite(-65, 7, 'medals', 1);
        medal.anchor.setTo(0.5, 0.5);
        this.scoreboard.addChild(medal);
    }
    else if (score >= 20) {
        medal = this.game.add.sprite(-65, 7, 'medals', 0);
        medal.anchor.setTo(0.5, 0.5);
        this.scoreboard.addChild(medal);
    }

    // Step 7
    if (medal) {

        var emitter = this.game.add.emitter(medal.x, medal.y, 400);
        this.scoreboard.addChild(emitter);
        emitter.width = medal.width;
        emitter.height = medal.height;

        emitter.makeParticles('particle');

        emitter.setRotation(-100, 100);
        emitter.setXSpeed(0, 0);
        emitter.setYSpeed(0, 0);
        emitter.minParticleScale = 0.25;
        emitter.maxParticleScale = 0.5;
        emitter.setAll('body.allowGravity', false);

        emitter.start(false, 1000, 1000);

    }
    this.game.add.tween(this).to({
        y: 0
    }, 1000, Phaser.Easing.Bounce.Out, true);
};

Scoreboard.prototype.startClick = function(){
    this.game.state.start('game');
};

module.exports = Scoreboard;
},{}],"/home/ubuntu/workspace/src/js/preloader.js":[function(require,module,exports){
'use strict';

function Preloader() {
  this.asset = null;
  this.ready = false;
}

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(this.width/2, this.height/2, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    
    this.loadImages();
    
    this.load.bitmapFont('flappyfont', 'assets/fonts/flappyfont/flappyfont.png', 'assets/fonts/flappyfont/flappyfont.fnt');
    
    this.loadSpritesheets();
    
    this.loadSounds();
  },
  
  loadImages: function(){
    this.load.image('background', 'assets/background.png');
    this.load.image('ground', 'assets/ground.png');
    this.load.image('title', 'assets/title.png');
    this.load.image('startButton', 'assets/start-button.png');
    this.load.image('instructions', 'assets/instructions.png');
    this.load.image('getReady', 'assets/get-ready.png');
    this.load.image('scoreboard', 'assets/scoreboard.png');
    this.load.image('gameover', 'assets/gameover.png');
    this.load.image('particle', 'assets/particle.png');
  },
  loadSounds: function(){
    this.load.audio('score', 'assets/score.wav');
    this.load.audio('flap', 'assets/flap.wav');
    this.load.audio('pipeHit', 'assets/pipe-hit.wav');
    this.load.audio('groundHit', 'assets/ground-hit.wav');
  },
  loadSpritesheets: function(){
    this.load.spritesheet('bird', 'assets/bird.png', 34, 24, 3);
    this.load.spritesheet('pipe', 'assets/pipes.png', 54, 320, 2);
    this.load.spritesheet('medals', 'assets/medals.png', 44, 46, 2);
  },
  create: function () {
    this.asset.cropEnabled = false;
  },
  
  update: function () {
    if (!!this.ready) {
      this.game.state.start('game');
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

module.exports = Preloader;
},{}]},{},["./src/js/main.js"])
//# sourceMappingURL=data:application/json;base64,
